{"kind":"code","props":{"deps":{},"location":"_o1","nonce":1,"origin":"_o1","owner":"1PytriYokKN3GpKw84L4vvrGBwUvTYzCpx","satoshis":0},"src":"class Hex {\n  static stringToBytes (s) {\n    if (typeof s !== 'string' || s.length % 2 !== 0) {\n      throw new Error(`Bad hex: ${s}`)\n    }\n\n    s = s.toLowerCase()\n\n    const HEX_CHARS = '0123456789abcdef'.split('')\n    const bytes = []\n\n    for (let i = 0; i < s.length; i += 2) {\n      const high = HEX_CHARS.indexOf(s[i])\n      const low = HEX_CHARS.indexOf(s[i + 1])\n\n      if (high === -1 || low === -1) {\n        throw new Error(`Bad hex: ${s}`)\n      }\n\n      bytes.push(high * 16 + low)\n    }\n\n    return bytes\n  }\n\n  static bytesToString (b) {\n    if (!Array.isArray(b)) throw new Error(`Bad bytes: ${b}`)\n\n    const validDigit = x => Number.isInteger(x) && x >= 0 && x < 256\n    b.forEach(x => { if (!validDigit(x)) throw new Error(`Bad digit: ${x}`) })\n\n    return b\n      .map(x => x.toString('16'))\n      .map(x => x.length === 1 ? '0' + x : x)\n      .join('')\n  }\n}","version":"04"}