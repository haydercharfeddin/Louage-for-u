{"kind":"code","props":{"deps":{"Berry":{"$jig":"native://Berry"},"txo":{"$jig":"_o2"}},"location":"_o3","metadata":{"author":"Run â–¸ Extra","license":"MIT","website":"https://www.run.network"},"nonce":2,"origin":"5332c013476cd2a2c18710a01188695bc27a5ef1748a51d4a5910feb1111dab4_o1","owner":"1PytriYokKN3GpKw84L4vvrGBwUvTYzCpx","satoshis":0},"src":"class B extends Berry {\n  init (base64Data, mediaType, encoding, filename, metadata = {}) {\n    this.base64Data = base64Data\n    this.mediaType = mediaType\n    this.encoding = encoding\n    this.filename = filename\n    this.metadata = metadata\n\n    if (mediaType === 'image/svg+xml' || mediaType === 'image/png') {\n      this.metadata.image = this\n    }\n  }\n\n  static async pluck (path, fetch) {\n    const txid = path.length === 64 ? path : JSON.parse(path).txid\n    const metadata = path.length === 64 ? {} : JSON.parse(path).metadata\n    const data = txo(await fetch(txid))\n    const out = data.out.find(o => o.s2 === '19HxigV4QyBv3tHpQVcUEQyq1pzZVdoAut')\n    if (!out) throw new Error(`Cannot find B:// data in ${txid}`)\n    return new B(out.b3, out.s4, out.s5, out.s6, metadata)\n  }\n\n  static async loadWithMetadata (txid, metadata) {\n    return this.load(JSON.stringify({ txid, metadata }))\n  }\n}","version":"04"}